/**
 * Stalker API
 * API di Stalker di Imola Informatica sviluppato da qbteam
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: qbteamswe@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.qbteam.api;

import it.qbteam.ApiInvoker;
import it.qbteam.ApiException;
import it.qbteam.Pair;

import it.qbteam.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import it.qbteam.model.Place;
import it.qbteam.model.PlaceAccess;
import it.qbteam.model.PlaceMovement;
import it.qbteam.model.PlacePresenceCounter;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class PlaceApi {
  String basePath = "http://localhost:8080";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Creates a new place for an organization.
  * Creates a new place for an organization. Only web-app admininistrators can access this end-point.
   * @param place 
   * @return Place
  */
  public Place createNewPlace (Place place) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = place;
    // verify the required parameter 'place' is set
    if (place == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'place' when calling createNewPlace",
        new ApiException(400, "Missing the required parameter 'place' when calling createNewPlace"));
    }

    // create path and map variables
    String path = "/place";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Place) ApiInvoker.deserialize(localVarResponse, "", Place.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new place for an organization.
   * Creates a new place for an organization. Only web-app admininistrators can access this end-point.
   * @param place 
  */
  public void createNewPlace (Place place, final Response.Listener<Place> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = place;

    // verify the required parameter 'place' is set
    if (place == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'place' when calling createNewPlace",
        new ApiException(400, "Missing the required parameter 'place' when calling createNewPlace"));
    }

    // create path and map variables
    String path = "/place".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Place) ApiInvoker.deserialize(localVarResponse,  "", Place.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes a place of an organization.
  * Deletes a place of an organization. Only web-app admininistrators can access this end-point.
   * @param placeId ID of a place.
   * @return void
  */
  public void deletePlace (Long placeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling deletePlace",
        new ApiException(400, "Missing the required parameter 'placeId' when calling deletePlace"));
    }

    // create path and map variables
    String path = "/place/{placeId}".replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes a place of an organization.
   * Deletes a place of an organization. Only web-app admininistrators can access this end-point.
   * @param placeId ID of a place.
  */
  public void deletePlace (Long placeId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling deletePlace",
        new ApiException(400, "Missing the required parameter 'placeId' when calling deletePlace"));
    }

    // create path and map variables
    String path = "/place/{placeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns all the authenticated accesses in a place registered of one or more users (orgAuthServerIds are separated by commas).
  * Returns all the authenticated accesses in a place registered of one or more users (orgAuthServerIds are separated by commas) that are fully registered. Fully registered means that there are both the entrance and the exit timestamp. Both app users and web-app admininistrators can access this end-point.
   * @param orgAuthServerIds One or more orgAuthServerIds. If it is called by the app user, the orgAuthServerIds parameter can only consist in one identifier. Otherwise it can be more than one identifier.
   * @param placeId ID of a place.
   * @return List<PlaceAccess>
  */
  public List<PlaceAccess> getAuthenticatedAccessListInPlace (List<String> orgAuthServerIds, Long placeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgAuthServerIds' is set
    if (orgAuthServerIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInPlace",
        new ApiException(400, "Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInPlace"));
    }
    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling getAuthenticatedAccessListInPlace",
        new ApiException(400, "Missing the required parameter 'placeId' when calling getAuthenticatedAccessListInPlace"));
    }

    // create path and map variables
    String path = "/access/place/{placeId}/authenticated/{orgAuthServerIds}".replaceAll("\\{" + "orgAuthServerIds" + "\\}", apiInvoker.escapeString(orgAuthServerIds.toString())).replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PlaceAccess>) ApiInvoker.deserialize(localVarResponse, "array", PlaceAccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all the authenticated accesses in a place registered of one or more users (orgAuthServerIds are separated by commas).
   * Returns all the authenticated accesses in a place registered of one or more users (orgAuthServerIds are separated by commas) that are fully registered. Fully registered means that there are both the entrance and the exit timestamp. Both app users and web-app admininistrators can access this end-point.
   * @param orgAuthServerIds One or more orgAuthServerIds. If it is called by the app user, the orgAuthServerIds parameter can only consist in one identifier. Otherwise it can be more than one identifier.   * @param placeId ID of a place.
  */
  public void getAuthenticatedAccessListInPlace (List<String> orgAuthServerIds, Long placeId, final Response.Listener<List<PlaceAccess>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgAuthServerIds' is set
    if (orgAuthServerIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInPlace",
        new ApiException(400, "Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInPlace"));
    }
    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling getAuthenticatedAccessListInPlace",
        new ApiException(400, "Missing the required parameter 'placeId' when calling getAuthenticatedAccessListInPlace"));
    }

    // create path and map variables
    String path = "/access/place/{placeId}/authenticated/{orgAuthServerIds}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgAuthServerIds" + "\\}", apiInvoker.escapeString(orgAuthServerIds.toString())).replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PlaceAccess>) ApiInvoker.deserialize(localVarResponse,  "array", PlaceAccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns the list of places of the organization.
  * Returns the list of places of the organization. Both app users and web-app admininistrators can access this end-point.
   * @param organizationId ID of an organization.
   * @return List<Place>
  */
  public List<Place> getPlaceListOfOrganization (Long organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getPlaceListOfOrganization",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getPlaceListOfOrganization"));
    }

    // create path and map variables
    String path = "/organization/{organizationId}/place".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Place>) ApiInvoker.deserialize(localVarResponse, "array", Place.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns the list of places of the organization.
   * Returns the list of places of the organization. Both app users and web-app admininistrators can access this end-point.
   * @param organizationId ID of an organization.
  */
  public void getPlaceListOfOrganization (Long organizationId, final Response.Listener<List<Place>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getPlaceListOfOrganization",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getPlaceListOfOrganization"));
    }

    // create path and map variables
    String path = "/organization/{organizationId}/place".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Place>) ApiInvoker.deserialize(localVarResponse,  "array", Place.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the number of people currently inside the place&#39;s trackingArea.
  * Gets the number of people currently inside the place&#39;s trackingArea. Only web-app admininistrators can access this end-point.
   * @param placeId ID of a place.
   * @return PlacePresenceCounter
  */
  public PlacePresenceCounter getPlacePresenceCounter (Long placeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling getPlacePresenceCounter",
        new ApiException(400, "Missing the required parameter 'placeId' when calling getPlacePresenceCounter"));
    }

    // create path and map variables
    String path = "/presence/place/{placeId}/counter".replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PlacePresenceCounter) ApiInvoker.deserialize(localVarResponse, "", PlacePresenceCounter.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the number of people currently inside the place&#39;s trackingArea.
   * Gets the number of people currently inside the place&#39;s trackingArea. Only web-app admininistrators can access this end-point.
   * @param placeId ID of a place.
  */
  public void getPlacePresenceCounter (Long placeId, final Response.Listener<PlacePresenceCounter> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling getPlacePresenceCounter",
        new ApiException(400, "Missing the required parameter 'placeId' when calling getPlacePresenceCounter"));
    }

    // create path and map variables
    String path = "/presence/place/{placeId}/counter".replaceAll("\\{format\\}","json").replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PlacePresenceCounter) ApiInvoker.deserialize(localVarResponse,  "", PlacePresenceCounter.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the list of people currently inside the place&#39;s trackingArea.
  * Gets the list of people currently inside the place&#39;s trackingArea. The place is required to track people with trackingMode: authenticated. Only web-app admininistrators can access this end-point.
   * @param placeId ID of a place.
   * @return List<PlaceAccess>
  */
  public List<PlaceAccess> getPlacePresenceList (Long placeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling getPlacePresenceList",
        new ApiException(400, "Missing the required parameter 'placeId' when calling getPlacePresenceList"));
    }

    // create path and map variables
    String path = "/presence/place/{placeId}".replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PlaceAccess>) ApiInvoker.deserialize(localVarResponse, "array", PlaceAccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the list of people currently inside the place&#39;s trackingArea.
   * Gets the list of people currently inside the place&#39;s trackingArea. The place is required to track people with trackingMode: authenticated. Only web-app admininistrators can access this end-point.
   * @param placeId ID of a place.
  */
  public void getPlacePresenceList (Long placeId, final Response.Listener<List<PlaceAccess>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling getPlacePresenceList",
        new ApiException(400, "Missing the required parameter 'placeId' when calling getPlacePresenceList"));
    }

    // create path and map variables
    String path = "/presence/place/{placeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PlaceAccess>) ApiInvoker.deserialize(localVarResponse,  "array", PlaceAccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Tracks the user movement inside the trackingArea of a place of an organization.
  * Tracks the user movement inside the trackingArea of a place of an organization.
   * @param placeMovement 
   * @return PlaceMovement
  */
  public PlaceMovement trackMovementInPlace (PlaceMovement placeMovement) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = placeMovement;
    // verify the required parameter 'placeMovement' is set
    if (placeMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeMovement' when calling trackMovementInPlace",
        new ApiException(400, "Missing the required parameter 'placeMovement' when calling trackMovementInPlace"));
    }

    // create path and map variables
    String path = "/movement/track/place";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PlaceMovement) ApiInvoker.deserialize(localVarResponse, "", PlaceMovement.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Tracks the user movement inside the trackingArea of a place of an organization.
   * Tracks the user movement inside the trackingArea of a place of an organization.
   * @param placeMovement 
  */
  public void trackMovementInPlace (PlaceMovement placeMovement, final Response.Listener<PlaceMovement> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = placeMovement;

    // verify the required parameter 'placeMovement' is set
    if (placeMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeMovement' when calling trackMovementInPlace",
        new ApiException(400, "Missing the required parameter 'placeMovement' when calling trackMovementInPlace"));
    }

    // create path and map variables
    String path = "/movement/track/place".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PlaceMovement) ApiInvoker.deserialize(localVarResponse,  "", PlaceMovement.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates one or more properties of a place of an organization.
  * Updates one or more properties of a place of an organization. Only web-app admininistrators can access this end-point.
   * @param placeId ID of a place.
   * @param place 
   * @return Place
  */
  public Place updatePlace (Long placeId, Place place) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = place;
    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling updatePlace",
        new ApiException(400, "Missing the required parameter 'placeId' when calling updatePlace"));
    }
    // verify the required parameter 'place' is set
    if (place == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'place' when calling updatePlace",
        new ApiException(400, "Missing the required parameter 'place' when calling updatePlace"));
    }

    // create path and map variables
    String path = "/place/{placeId}".replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Place) ApiInvoker.deserialize(localVarResponse, "", Place.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates one or more properties of a place of an organization.
   * Updates one or more properties of a place of an organization. Only web-app admininistrators can access this end-point.
   * @param placeId ID of a place.   * @param place 
  */
  public void updatePlace (Long placeId, Place place, final Response.Listener<Place> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = place;

    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling updatePlace",
        new ApiException(400, "Missing the required parameter 'placeId' when calling updatePlace"));
    }
    // verify the required parameter 'place' is set
    if (place == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'place' when calling updatePlace",
        new ApiException(400, "Missing the required parameter 'place' when calling updatePlace"));
    }

    // create path and map variables
    String path = "/place/{placeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Place) ApiInvoker.deserialize(localVarResponse,  "", Place.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
