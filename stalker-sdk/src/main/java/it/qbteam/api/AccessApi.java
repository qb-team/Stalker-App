/**
 * Stalker API
 * API di Stalker di Imola Informatica sviluppato da qbteam
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: qbteamswe@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.qbteam.api;

import it.qbteam.ApiInvoker;
import it.qbteam.ApiException;
import it.qbteam.Pair;

import it.qbteam.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import it.qbteam.model.OrganizationAccess;
import it.qbteam.model.PlaceAccess;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AccessApi {
  String basePath = "http://localhost:8080";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Returns all the authenticated accesses in an organization registered of one or more users (orgAuthServerIds are separated by commas).
  * Returns all the authenticated accesses in an organization registered of one or more users (orgAuthServerIds are separated by commas) that are fully registered. Fully registered means that there are both the entrance and the exit timestamp. Both app users and web-app admininistrators can access this end-point.
   * @param orgAuthServerIds One or more orgAuthServerIds. If it is called by the app user, the orgAuthServerIds parameter can only consist in one identifier. Otherwise it can be more than one identifier.
   * @param organizationId ID of an organization
   * @return List<OrganizationAccess>
  */
  public List<OrganizationAccess> getAuthenticatedAccessListInOrganization (List<String> orgAuthServerIds, Long organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgAuthServerIds' is set
    if (orgAuthServerIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInOrganization",
        new ApiException(400, "Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInOrganization"));
    }
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getAuthenticatedAccessListInOrganization",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getAuthenticatedAccessListInOrganization"));
    }

    // create path and map variables
    String path = "/access/organization/{organizationId}/authenticated/{orgAuthServerIds}".replaceAll("\\{" + "orgAuthServerIds" + "\\}", apiInvoker.escapeString(orgAuthServerIds.toString())).replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<OrganizationAccess>) ApiInvoker.deserialize(localVarResponse, "array", OrganizationAccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all the authenticated accesses in an organization registered of one or more users (orgAuthServerIds are separated by commas).
   * Returns all the authenticated accesses in an organization registered of one or more users (orgAuthServerIds are separated by commas) that are fully registered. Fully registered means that there are both the entrance and the exit timestamp. Both app users and web-app admininistrators can access this end-point.
   * @param orgAuthServerIds One or more orgAuthServerIds. If it is called by the app user, the orgAuthServerIds parameter can only consist in one identifier. Otherwise it can be more than one identifier.   * @param organizationId ID of an organization
  */
  public void getAuthenticatedAccessListInOrganization (List<String> orgAuthServerIds, Long organizationId, final Response.Listener<List<OrganizationAccess>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgAuthServerIds' is set
    if (orgAuthServerIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInOrganization",
        new ApiException(400, "Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInOrganization"));
    }
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getAuthenticatedAccessListInOrganization",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getAuthenticatedAccessListInOrganization"));
    }

    // create path and map variables
    String path = "/access/organization/{organizationId}/authenticated/{orgAuthServerIds}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgAuthServerIds" + "\\}", apiInvoker.escapeString(orgAuthServerIds.toString())).replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<OrganizationAccess>) ApiInvoker.deserialize(localVarResponse,  "array", OrganizationAccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns all the authenticated accesses in a place registered of one or more users (orgAuthServerIds are separated by commas).
  * Returns all the authenticated accesses in a place registered of one or more users (orgAuthServerIds are separated by commas) that are fully registered. Fully registered means that there are both the entrance and the exit timestamp. Both app users and web-app admininistrators can access this end-point.
   * @param orgAuthServerIds One or more orgAuthServerIds. If it is called by the app user, the orgAuthServerIds parameter can only consist in one identifier. Otherwise it can be more than one identifier.
   * @param placeId ID of a place.
   * @return List<PlaceAccess>
  */
  public List<PlaceAccess> getAuthenticatedAccessListInPlace (List<String> orgAuthServerIds, Long placeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orgAuthServerIds' is set
    if (orgAuthServerIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInPlace",
        new ApiException(400, "Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInPlace"));
    }
    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling getAuthenticatedAccessListInPlace",
        new ApiException(400, "Missing the required parameter 'placeId' when calling getAuthenticatedAccessListInPlace"));
    }

    // create path and map variables
    String path = "/access/place/{placeId}/authenticated/{orgAuthServerIds}".replaceAll("\\{" + "orgAuthServerIds" + "\\}", apiInvoker.escapeString(orgAuthServerIds.toString())).replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PlaceAccess>) ApiInvoker.deserialize(localVarResponse, "array", PlaceAccess.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all the authenticated accesses in a place registered of one or more users (orgAuthServerIds are separated by commas).
   * Returns all the authenticated accesses in a place registered of one or more users (orgAuthServerIds are separated by commas) that are fully registered. Fully registered means that there are both the entrance and the exit timestamp. Both app users and web-app admininistrators can access this end-point.
   * @param orgAuthServerIds One or more orgAuthServerIds. If it is called by the app user, the orgAuthServerIds parameter can only consist in one identifier. Otherwise it can be more than one identifier.   * @param placeId ID of a place.
  */
  public void getAuthenticatedAccessListInPlace (List<String> orgAuthServerIds, Long placeId, final Response.Listener<List<PlaceAccess>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orgAuthServerIds' is set
    if (orgAuthServerIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInPlace",
        new ApiException(400, "Missing the required parameter 'orgAuthServerIds' when calling getAuthenticatedAccessListInPlace"));
    }
    // verify the required parameter 'placeId' is set
    if (placeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeId' when calling getAuthenticatedAccessListInPlace",
        new ApiException(400, "Missing the required parameter 'placeId' when calling getAuthenticatedAccessListInPlace"));
    }

    // create path and map variables
    String path = "/access/place/{placeId}/authenticated/{orgAuthServerIds}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "orgAuthServerIds" + "\\}", apiInvoker.escapeString(orgAuthServerIds.toString())).replaceAll("\\{" + "placeId" + "\\}", apiInvoker.escapeString(placeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PlaceAccess>) ApiInvoker.deserialize(localVarResponse,  "array", PlaceAccess.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
