/**
 * Stalker API
 * API di Stalker di Imola Informatica sviluppato da qbteam
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: qbteamswe@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.qbteam.model;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Access to a place of an organization.
 **/
@ApiModel(description = "Access to a place of an organization.")
public class PlaceAccess {
  
  @SerializedName("id")
  private Long id = null;
  @SerializedName("entranceTimestamp")
  private Date entranceTimestamp = null;
  @SerializedName("exitTimestamp")
  private Date exitTimestamp = null;
  @SerializedName("placeId")
  private Long placeId = null;
  @SerializedName("orgAuthServerId")
  private String orgAuthServerId = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * Date and time of the moment in which the user entered the place.
   **/
  @ApiModelProperty(required = true, value = "Date and time of the moment in which the user entered the place.")
  public Date getEntranceTimestamp() {
    return entranceTimestamp;
  }
  public void setEntranceTimestamp(Date entranceTimestamp) {
    this.entranceTimestamp = entranceTimestamp;
  }

  /**
   * Date and time of the moment in which the user left the place.
   **/
  @ApiModelProperty(value = "Date and time of the moment in which the user left the place.")
  public Date getExitTimestamp() {
    return exitTimestamp;
  }
  public void setExitTimestamp(Date exitTimestamp) {
    this.exitTimestamp = exitTimestamp;
  }

  /**
   * Unique identifier of the place in which the user had access.
   **/
  @ApiModelProperty(required = true, value = "Unique identifier of the place in which the user had access.")
  public Long getPlaceId() {
    return placeId;
  }
  public void setPlaceId(Long placeId) {
    this.placeId = placeId;
  }

  /**
   * User unique identifier from the authentication server of the organization.
   **/
  @ApiModelProperty(value = "User unique identifier from the authentication server of the organization.")
  public String getOrgAuthServerId() {
    return orgAuthServerId;
  }
  public void setOrgAuthServerId(String orgAuthServerId) {
    this.orgAuthServerId = orgAuthServerId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaceAccess placeAccess = (PlaceAccess) o;
    return (this.id == null ? placeAccess.id == null : this.id.equals(placeAccess.id)) &&
        (this.entranceTimestamp == null ? placeAccess.entranceTimestamp == null : this.entranceTimestamp.equals(placeAccess.entranceTimestamp)) &&
        (this.exitTimestamp == null ? placeAccess.exitTimestamp == null : this.exitTimestamp.equals(placeAccess.exitTimestamp)) &&
        (this.placeId == null ? placeAccess.placeId == null : this.placeId.equals(placeAccess.placeId)) &&
        (this.orgAuthServerId == null ? placeAccess.orgAuthServerId == null : this.orgAuthServerId.equals(placeAccess.orgAuthServerId));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.entranceTimestamp == null ? 0: this.entranceTimestamp.hashCode());
    result = 31 * result + (this.exitTimestamp == null ? 0: this.exitTimestamp.hashCode());
    result = 31 * result + (this.placeId == null ? 0: this.placeId.hashCode());
    result = 31 * result + (this.orgAuthServerId == null ? 0: this.orgAuthServerId.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaceAccess {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  entranceTimestamp: ").append(entranceTimestamp).append("\n");
    sb.append("  exitTimestamp: ").append(exitTimestamp).append("\n");
    sb.append("  placeId: ").append(placeId).append("\n");
    sb.append("  orgAuthServerId: ").append(orgAuthServerId).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
