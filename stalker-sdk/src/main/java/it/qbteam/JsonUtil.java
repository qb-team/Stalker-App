/**
 * Stalker API
 * API di Stalker di Imola Informatica sviluppato da qbteam
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: qbteamswe@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.qbteam;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import it.qbteam.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Administrator".equalsIgnoreCase(className)) {
      return new TypeToken<List<Administrator>>(){}.getType();
    }
    
    if ("AdministratorInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<AdministratorInfo>>(){}.getType();
    }
    
    if ("Favorite".equalsIgnoreCase(className)) {
      return new TypeToken<List<Favorite>>(){}.getType();
    }
    
    if ("Organization".equalsIgnoreCase(className)) {
      return new TypeToken<List<Organization>>(){}.getType();
    }
    
    if ("OrganizationAccess".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrganizationAccess>>(){}.getType();
    }
    
    if ("OrganizationMovement".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrganizationMovement>>(){}.getType();
    }
    
    if ("OrganizationPresenceCounter".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrganizationPresenceCounter>>(){}.getType();
    }
    
    if ("Permission".equalsIgnoreCase(className)) {
      return new TypeToken<List<Permission>>(){}.getType();
    }
    
    if ("Place".equalsIgnoreCase(className)) {
      return new TypeToken<List<Place>>(){}.getType();
    }
    
    if ("PlaceAccess".equalsIgnoreCase(className)) {
      return new TypeToken<List<PlaceAccess>>(){}.getType();
    }
    
    if ("PlaceMovement".equalsIgnoreCase(className)) {
      return new TypeToken<List<PlaceMovement>>(){}.getType();
    }
    
    if ("PlacePresenceCounter".equalsIgnoreCase(className)) {
      return new TypeToken<List<PlacePresenceCounter>>(){}.getType();
    }
    
    if ("TimePerUserReport".equalsIgnoreCase(className)) {
      return new TypeToken<List<TimePerUserReport>>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<List<User>>(){}.getType();
    }
    
    if ("UserInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserInfo>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Administrator".equalsIgnoreCase(className)) {
      return new TypeToken<Administrator>(){}.getType();
    }
    
    if ("AdministratorInfo".equalsIgnoreCase(className)) {
      return new TypeToken<AdministratorInfo>(){}.getType();
    }
    
    if ("Favorite".equalsIgnoreCase(className)) {
      return new TypeToken<Favorite>(){}.getType();
    }
    
    if ("Organization".equalsIgnoreCase(className)) {
      return new TypeToken<Organization>(){}.getType();
    }
    
    if ("OrganizationAccess".equalsIgnoreCase(className)) {
      return new TypeToken<OrganizationAccess>(){}.getType();
    }
    
    if ("OrganizationMovement".equalsIgnoreCase(className)) {
      return new TypeToken<OrganizationMovement>(){}.getType();
    }
    
    if ("OrganizationPresenceCounter".equalsIgnoreCase(className)) {
      return new TypeToken<OrganizationPresenceCounter>(){}.getType();
    }
    
    if ("Permission".equalsIgnoreCase(className)) {
      return new TypeToken<Permission>(){}.getType();
    }
    
    if ("Place".equalsIgnoreCase(className)) {
      return new TypeToken<Place>(){}.getType();
    }
    
    if ("PlaceAccess".equalsIgnoreCase(className)) {
      return new TypeToken<PlaceAccess>(){}.getType();
    }
    
    if ("PlaceMovement".equalsIgnoreCase(className)) {
      return new TypeToken<PlaceMovement>(){}.getType();
    }
    
    if ("PlacePresenceCounter".equalsIgnoreCase(className)) {
      return new TypeToken<PlacePresenceCounter>(){}.getType();
    }
    
    if ("TimePerUserReport".equalsIgnoreCase(className)) {
      return new TypeToken<TimePerUserReport>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<User>(){}.getType();
    }
    
    if ("UserInfo".equalsIgnoreCase(className)) {
      return new TypeToken<UserInfo>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
