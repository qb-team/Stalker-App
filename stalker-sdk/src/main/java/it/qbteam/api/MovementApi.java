/**
 * Stalker API
 * API di Stalker di Imola Informatica sviluppato da qbteam
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: qbteamswe@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.qbteam.api;

import it.qbteam.ApiInvoker;
import it.qbteam.ApiException;
import it.qbteam.Pair;

import it.qbteam.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import it.qbteam.model.OrganizationMovement;
import it.qbteam.model.PlaceMovement;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MovementApi {
  String basePath = "http://localhost:8080";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Tracks the user movement inside the trackingArea of an organization.
  * Tracks the user movement inside the trackingArea of an organization.
   * @param organizationMovement 
   * @return OrganizationMovement
  */
  public OrganizationMovement trackMovementInOrganization (OrganizationMovement organizationMovement) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = organizationMovement;
    // verify the required parameter 'organizationMovement' is set
    if (organizationMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationMovement' when calling trackMovementInOrganization",
        new ApiException(400, "Missing the required parameter 'organizationMovement' when calling trackMovementInOrganization"));
    }

    // create path and map variables
    String path = "/movement/track/organization";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrganizationMovement) ApiInvoker.deserialize(localVarResponse, "", OrganizationMovement.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Tracks the user movement inside the trackingArea of an organization.
   * Tracks the user movement inside the trackingArea of an organization.
   * @param organizationMovement 
  */
  public void trackMovementInOrganization (OrganizationMovement organizationMovement, final Response.Listener<OrganizationMovement> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = organizationMovement;

    // verify the required parameter 'organizationMovement' is set
    if (organizationMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationMovement' when calling trackMovementInOrganization",
        new ApiException(400, "Missing the required parameter 'organizationMovement' when calling trackMovementInOrganization"));
    }

    // create path and map variables
    String path = "/movement/track/organization".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrganizationMovement) ApiInvoker.deserialize(localVarResponse,  "", OrganizationMovement.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Tracks the user movement inside the trackingArea of a place of an organization.
  * Tracks the user movement inside the trackingArea of a place of an organization.
   * @param placeMovement 
   * @return PlaceMovement
  */
  public PlaceMovement trackMovementInPlace (PlaceMovement placeMovement) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = placeMovement;
    // verify the required parameter 'placeMovement' is set
    if (placeMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeMovement' when calling trackMovementInPlace",
        new ApiException(400, "Missing the required parameter 'placeMovement' when calling trackMovementInPlace"));
    }

    // create path and map variables
    String path = "/movement/track/place";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PlaceMovement) ApiInvoker.deserialize(localVarResponse, "", PlaceMovement.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Tracks the user movement inside the trackingArea of a place of an organization.
   * Tracks the user movement inside the trackingArea of a place of an organization.
   * @param placeMovement 
  */
  public void trackMovementInPlace (PlaceMovement placeMovement, final Response.Listener<PlaceMovement> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = placeMovement;

    // verify the required parameter 'placeMovement' is set
    if (placeMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeMovement' when calling trackMovementInPlace",
        new ApiException(400, "Missing the required parameter 'placeMovement' when calling trackMovementInPlace"));
    }

    // create path and map variables
    String path = "/movement/track/place".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "bearerAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PlaceMovement) ApiInvoker.deserialize(localVarResponse,  "", PlaceMovement.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
