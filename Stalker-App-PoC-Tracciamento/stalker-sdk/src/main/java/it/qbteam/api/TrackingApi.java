/**
 * Stalker API
 * API di Stalker di Imola Informatica sviluppato da qbteam
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: qbteamswe@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.qbteam.api;

import it.qbteam.ApiInvoker;
import it.qbteam.ApiException;
import it.qbteam.Pair;

import it.qbteam.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import it.qbteam.model.OrganizationAnonymousMovement;
import it.qbteam.model.OrganizationAuthenticatedMovement;
import it.qbteam.model.PlaceAnonymousMovement;
import it.qbteam.model.PlaceAuthenticatedMovement;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TrackingApi {
  String basePath = "http://localhost:8080";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Tracks the user movement inside the trackingArea of an organization with the anonymous trackingMode.
  * Tracks the user movement inside the trackingArea of an organization with the anonymous trackingMode.
   * @param organizationAnonymousMovement 
   * @return void
  */
  public void trackAnonymousMovementInOrganization (OrganizationAnonymousMovement organizationAnonymousMovement) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = organizationAnonymousMovement;
    // verify the required parameter 'organizationAnonymousMovement' is set
    if (organizationAnonymousMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationAnonymousMovement' when calling trackAnonymousMovementInOrganization",
        new ApiException(400, "Missing the required parameter 'organizationAnonymousMovement' when calling trackAnonymousMovementInOrganization"));
    }

    // create path and map variables
    String path = "/movement/track/organization/anonymous";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Tracks the user movement inside the trackingArea of an organization with the anonymous trackingMode.
   * Tracks the user movement inside the trackingArea of an organization with the anonymous trackingMode.
   * @param organizationAnonymousMovement 
  */
  public void trackAnonymousMovementInOrganization (OrganizationAnonymousMovement organizationAnonymousMovement, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = organizationAnonymousMovement;

    // verify the required parameter 'organizationAnonymousMovement' is set
    if (organizationAnonymousMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationAnonymousMovement' when calling trackAnonymousMovementInOrganization",
        new ApiException(400, "Missing the required parameter 'organizationAnonymousMovement' when calling trackAnonymousMovementInOrganization"));
    }

    // create path and map variables
    String path = "/movement/track/organization/anonymous".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Tracks the user movement inside the trackingArea of a place of an organization with the anonymous trackingMode.
  * Tracks the user movement inside the trackingArea of a place of an organization with the anonymous trackingMode.
   * @param placeAnonymousMovement 
   * @return void
  */
  public void trackAnonymousMovementInPlace (PlaceAnonymousMovement placeAnonymousMovement) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = placeAnonymousMovement;
    // verify the required parameter 'placeAnonymousMovement' is set
    if (placeAnonymousMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeAnonymousMovement' when calling trackAnonymousMovementInPlace",
        new ApiException(400, "Missing the required parameter 'placeAnonymousMovement' when calling trackAnonymousMovementInPlace"));
    }

    // create path and map variables
    String path = "/movement/track/place/anonymous";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Tracks the user movement inside the trackingArea of a place of an organization with the anonymous trackingMode.
   * Tracks the user movement inside the trackingArea of a place of an organization with the anonymous trackingMode.
   * @param placeAnonymousMovement 
  */
  public void trackAnonymousMovementInPlace (PlaceAnonymousMovement placeAnonymousMovement, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = placeAnonymousMovement;

    // verify the required parameter 'placeAnonymousMovement' is set
    if (placeAnonymousMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeAnonymousMovement' when calling trackAnonymousMovementInPlace",
        new ApiException(400, "Missing the required parameter 'placeAnonymousMovement' when calling trackAnonymousMovementInPlace"));
    }

    // create path and map variables
    String path = "/movement/track/place/anonymous".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Tracks the user movement inside the trackingArea of an organization with the authenticated trackingMode.
  * Tracks the user movement inside the trackingArea of an organization with the authenticated trackingMode.
   * @param organizationAuthenticatedMovement 
   * @return void
  */
  public void trackAuthenticatedMovementInOrganization (OrganizationAuthenticatedMovement organizationAuthenticatedMovement) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = organizationAuthenticatedMovement;
    // verify the required parameter 'organizationAuthenticatedMovement' is set
    if (organizationAuthenticatedMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationAuthenticatedMovement' when calling trackAuthenticatedMovementInOrganization",
        new ApiException(400, "Missing the required parameter 'organizationAuthenticatedMovement' when calling trackAuthenticatedMovementInOrganization"));
    }

    // create path and map variables
    String path = "/movement/track/organization/authenticated";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Tracks the user movement inside the trackingArea of an organization with the authenticated trackingMode.
   * Tracks the user movement inside the trackingArea of an organization with the authenticated trackingMode.
   * @param organizationAuthenticatedMovement 
  */
  public void trackAuthenticatedMovementInOrganization (OrganizationAuthenticatedMovement organizationAuthenticatedMovement, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = organizationAuthenticatedMovement;

    // verify the required parameter 'organizationAuthenticatedMovement' is set
    if (organizationAuthenticatedMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationAuthenticatedMovement' when calling trackAuthenticatedMovementInOrganization",
        new ApiException(400, "Missing the required parameter 'organizationAuthenticatedMovement' when calling trackAuthenticatedMovementInOrganization"));
    }

    // create path and map variables
    String path = "/movement/track/organization/authenticated".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Tracks the user movement inside the trackingArea of a place of an organization with the authenticated trackingMode.
  * Tracks the user movement inside the trackingArea of a place of an organization with the authenticated trackingMode.
   * @param placeAuthenticatedMovement 
   * @return void
  */
  public void trackAuthenticatedMovementInPlace (PlaceAuthenticatedMovement placeAuthenticatedMovement) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = placeAuthenticatedMovement;
    // verify the required parameter 'placeAuthenticatedMovement' is set
    if (placeAuthenticatedMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeAuthenticatedMovement' when calling trackAuthenticatedMovementInPlace",
        new ApiException(400, "Missing the required parameter 'placeAuthenticatedMovement' when calling trackAuthenticatedMovementInPlace"));
    }

    // create path and map variables
    String path = "/movement/track/place/authenticated";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Tracks the user movement inside the trackingArea of a place of an organization with the authenticated trackingMode.
   * Tracks the user movement inside the trackingArea of a place of an organization with the authenticated trackingMode.
   * @param placeAuthenticatedMovement 
  */
  public void trackAuthenticatedMovementInPlace (PlaceAuthenticatedMovement placeAuthenticatedMovement, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = placeAuthenticatedMovement;

    // verify the required parameter 'placeAuthenticatedMovement' is set
    if (placeAuthenticatedMovement == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeAuthenticatedMovement' when calling trackAuthenticatedMovementInPlace",
        new ApiException(400, "Missing the required parameter 'placeAuthenticatedMovement' when calling trackAuthenticatedMovementInPlace"));
    }

    // create path and map variables
    String path = "/movement/track/place/authenticated".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
